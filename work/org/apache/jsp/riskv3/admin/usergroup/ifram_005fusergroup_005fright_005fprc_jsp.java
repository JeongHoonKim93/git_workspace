/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-05-03 00:41:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.riskv3.admin.usergroup;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import risk.util.*;
import java.util.*;
import risk.admin.membergroup.membergroupMng;
import risk.search.userEnvInfo;
import risk.search.userEnvMgr;
import risk.util.ConfigUtil;

public final class ifram_005fusergroup_005fright_005fprc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/riskv3/admin/usergroup/../../inc/sessioncheck.jsp", Long.valueOf(1651044823347L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("risk.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.search.userEnvInfo");
    _jspx_imports_classes.add("risk.util.ConfigUtil");
    _jspx_imports_classes.add("risk.search.userEnvMgr");
    _jspx_imports_classes.add("risk.admin.membergroup.membergroupMng");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

//@ page contentType="text/html; charset=euc-kr"

    
	String SS_M_NO = (String)session.getAttribute("SS_M_NO")   == null ? "": (String)session.getAttribute("SS_M_NO")  ;
    String SS_M_ID = (String)session.getAttribute("SS_M_ID")   == null ? "": (String)session.getAttribute("SS_M_ID")  ;
    String SS_M_NAME = (String)session.getAttribute("SS_M_NAME") == null ? "": (String)session.getAttribute("SS_M_NAME");
    String SS_MG_NO = (String)session.getAttribute("SS_MG_NO")  == null ? "": (String)session.getAttribute("SS_MG_NO") ;
	String SS_TITLE = (String)session.getAttribute("SS_TITLE")  == null ? "": (String)session.getAttribute("SS_TITLE");
    String SS_URL =   (String)session.getAttribute("SS_URL")    == null ? "": (String)session.getAttribute("SS_URL") ;
    String SS_M_DEPT =   (String)session.getAttribute("SS_M_DEPT")    == null ? "": (String)session.getAttribute("SS_M_DEPT") ;    
    String SS_M_IP =   (String)session.getAttribute("SS_M_IP")    == null ? "": (String)session.getAttribute("SS_M_IP") ;    
    String SS_M_MAIL =   (String)session.getAttribute("SS_M_MAIL")    == null ? "": (String)session.getAttribute("SS_M_MAIL") ;    
	String SS_M_ORGVIEW_USEYN = (String)session.getAttribute("SS_M_ORGVIEW_USEYN")    == null ? "": (String)session.getAttribute("SS_M_ORGVIEW_USEYN") ;    
	String SS_ML_URL = javax.servlet.http.HttpUtils.getRequestURL(request).toString();
	
	String SS_SEARCHDATE = (String)session.getAttribute("SS_SEARCHDATE")    == null ? "": (String)session.getAttribute("SS_SEARCHDATE") ;
	
	
    

	if ((SS_M_ID.equals("")) || !SS_M_IP.equals(request.getRemoteAddr()) ) {
		ConfigUtil cu = new ConfigUtil();
		out.print("<SCRIPT Language=JavaScript>");
		//out.print("window.setTimeout( \" top.document.location = "+cu.getConfig("URL")+"'riskv3/error/sessionerror.jsp' \") ");
		out.print("top.document.location = '"+cu.getConfig("URL")+"risk/sessionerror.jsp'");
        out.print("</SCRIPT>");
    }
	


	String mgseq = null;
	String[] mg_menu = null;
	String[] mg_kg = null;
	String[] mg_site = null;
	String[] mg_company = null;
	String menuset = "";
	String xpset = "";
	String siteset = "";
	String companyset = "";
	ParseRequest pr = new ParseRequest(request);
	pr.printParams();
	
	userEnvInfo uei = null;
    uei     = (userEnvInfo) session.getAttribute("ENV");

	StringUtil su = new StringUtil();
	membergroupMng mgmng = membergroupMng.getInstance();

	ArrayList subMenu = new ArrayList();
	if( request.getParameter("mg_menu") != null ) {
		mg_menu = request.getParameterValues("mg_menu");
		
		
		
		
		String menuIdx = pr.getString("menuIdx");
		String[] ar_menu = menuIdx.split(",");
		
		for(int i =0; i < ar_menu.length; i++){
			subMenu.add(request.getParameterValues("mg_menu2_" + ar_menu[i]));
		}
		
		String SubMenus = "";
		for(int i =0; i < subMenu.size(); i++){
			
			if(SubMenus.equals("")){
				
				if(subMenu.get(i) != null){
					SubMenus = su.dissplit((String[])subMenu.get(i), ",");	
				}
				
			}else{
				if(subMenu.get(i) != null){
					SubMenus += "," + su.dissplit((String[])subMenu.get(i), ",");	
				}
			}
		}
		
		menuset = su.dissplit(mg_menu, ",");
		
		if(menuset.equals("")){
			menuset = SubMenus;
		}else{
			menuset += "," + SubMenus;
		}
		
		
		
		
	}
	if( request.getParameter("mg_kg") != null ) {
		mg_kg = request.getParameterValues("mg_kg");
		xpset = su.dissplit(mg_kg, ",");
	}
	if( request.getParameter("mg_site") != null ) {
		mg_site = request.getParameterValues("mg_site");
		siteset = su.dissplit(mg_site, ",");
	}
	if( request.getParameter("mg_company") != null ) {
		mg_company = request.getParameterValues("mg_company");
		companyset = su.dissplit(mg_company, ",");
	}
	if( request.getParameter("mgseq") != null ) {
		mgseq = request.getParameter("mgseq");
		mgmng.updateMGset(mgseq, menuset, xpset, siteset, companyset); 
	}
	//유저 환경정보 다시 세션에 세팅
	if(uei!=null && uei.getMg_seq().equals(mgseq)){ // 내가 속한 그룹이면...
		uei.setMg_menu(menuset);
		uei.setMg_company(companyset);
		session.setAttribute("ENV", uei);
	}


      out.write(_jspx_char_array_0);
      out.print(mgseq);
      out.write(_jspx_char_array_1);
	if(uei!=null && uei.getMg_seq().equals(mgseq)){
      out.write(_jspx_char_array_2);
		if(su.inarray(mg_menu,"5")){ 
      out.write(_jspx_char_array_3);
		} else {
      out.write(_jspx_char_array_4);
		}
	}
      out.write(_jspx_char_array_5);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
  static char[] _jspx_char_array_0 = "<SCRIPT LANGUAGE=\"JavaScript\">\r\n<!--\r\n	location.href = 'ifram_usergroup_right.jsp?mgseq='+".toCharArray();
  static char[] _jspx_char_array_1 = ";\r\n\r\n	\r\n	".toCharArray();
  static char[] _jspx_char_array_2 = " // 내가 속한 그룹이면...\r\n	".toCharArray();
  static char[] _jspx_char_array_3 = "\r\n				top.topFrame.location = '../../inc/topmenu/inc_topmenu.jsp?selectedMenu=5';  \r\n	".toCharArray();
  static char[] _jspx_char_array_4 = "\r\n				top.location = '../../main.jsp';\r\n	".toCharArray();
  static char[] _jspx_char_array_5 = "\r\n//-->\r\n</SCRIPT>".toCharArray();
}
