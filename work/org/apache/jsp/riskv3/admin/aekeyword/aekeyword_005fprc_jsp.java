/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-05-25 00:28:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.riskv3.admin.aekeyword;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import risk.admin.aekeyword.ExceptionKeywordBean;
import risk.admin.aekeyword.ExceptionKeywordMgr;
import risk.util.ParseRequest;
import risk.util.ConfigUtil;

public final class aekeyword_005fprc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/riskv3/admin/aekeyword/../../inc/sessioncheck.jsp", Long.valueOf(1651044823347L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.util.ConfigUtil");
    _jspx_imports_classes.add("risk.util.ParseRequest");
    _jspx_imports_classes.add("risk.admin.aekeyword.ExceptionKeywordMgr");
    _jspx_imports_classes.add("risk.admin.aekeyword.ExceptionKeywordBean");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

//@ page contentType="text/html; charset=euc-kr"

    
	String SS_M_NO = (String)session.getAttribute("SS_M_NO")   == null ? "": (String)session.getAttribute("SS_M_NO")  ;
    String SS_M_ID = (String)session.getAttribute("SS_M_ID")   == null ? "": (String)session.getAttribute("SS_M_ID")  ;
    String SS_M_NAME = (String)session.getAttribute("SS_M_NAME") == null ? "": (String)session.getAttribute("SS_M_NAME");
    String SS_MG_NO = (String)session.getAttribute("SS_MG_NO")  == null ? "": (String)session.getAttribute("SS_MG_NO") ;
	String SS_TITLE = (String)session.getAttribute("SS_TITLE")  == null ? "": (String)session.getAttribute("SS_TITLE");
    String SS_URL =   (String)session.getAttribute("SS_URL")    == null ? "": (String)session.getAttribute("SS_URL") ;
    String SS_M_DEPT =   (String)session.getAttribute("SS_M_DEPT")    == null ? "": (String)session.getAttribute("SS_M_DEPT") ;    
    String SS_M_IP =   (String)session.getAttribute("SS_M_IP")    == null ? "": (String)session.getAttribute("SS_M_IP") ;    
    String SS_M_MAIL =   (String)session.getAttribute("SS_M_MAIL")    == null ? "": (String)session.getAttribute("SS_M_MAIL") ;    
	String SS_M_ORGVIEW_USEYN = (String)session.getAttribute("SS_M_ORGVIEW_USEYN")    == null ? "": (String)session.getAttribute("SS_M_ORGVIEW_USEYN") ;    
	String SS_ML_URL = javax.servlet.http.HttpUtils.getRequestURL(request).toString();
	
	String SS_SEARCHDATE = (String)session.getAttribute("SS_SEARCHDATE")    == null ? "": (String)session.getAttribute("SS_SEARCHDATE") ;
	
	
    

	if ((SS_M_ID.equals("")) || !SS_M_IP.equals(request.getRemoteAddr()) ) {
		ConfigUtil cu = new ConfigUtil();
		out.print("<SCRIPT Language=JavaScript>");
		//out.print("window.setTimeout( \" top.document.location = "+cu.getConfig("URL")+"'riskv3/error/sessionerror.jsp' \") ");
		out.print("top.document.location = '"+cu.getConfig("URL")+"risk/sessionerror.jsp'");
        out.print("</SCRIPT>");
    }
	

      out.write(_jspx_char_array_0);

	ParseRequest    pr = new ParseRequest(request);
	pr.printParams();
	String mName = SS_M_NAME;
	String ekSeq = pr.getString("ekSeq");
	String ekValue = pr.getString("ekValue");
	String ek_op = pr.getString("ek_op", "3");
	String checkIds = pr.getString("checkIds");
	String mode = pr.getString("mode");
	String type2 = pr.getString("type2");
	String targetSeq = pr.getString("targetSeq");
	
	ExceptionKeywordMgr ekMgr = new ExceptionKeywordMgr();
	if(mode.equals("insert")){
		if(ekMgr.insertKeyword(ekValue,ek_op,mName))
		{

      out.write(_jspx_char_array_1);

		}else{

      out.write(_jspx_char_array_2);

		}
	}else if(mode.equals("update")){		
		
	 	 System.out.println("1111111");
		
		if(ekMgr.updateKeyword(ekSeq,ekValue,mName))
		{
			System.out.println("222222");

      out.write(_jspx_char_array_3);

		}else{
			System.out.println("333333");

      out.write(_jspx_char_array_4);

		}
		
	}else if(mode.equals("delete")){
		if(ekMgr.delKeyword(checkIds))
		{

      out.write(_jspx_char_array_5);

		}else{

      out.write(_jspx_char_array_6);

		}
	}else if(mode.equals("keyword")){
		if(type2.equals("add"))
		{
			
			
			String[] arTarget = pr.getStringArr("k_seq_L");
			if(arTarget != null && arTarget.length > 0){
				for(int i =0; i < arTarget.length; i++){
					ekMgr.UpdateExkeyword(ekSeq, arTarget[i], ExceptionKeywordBean.Mode.KEYWORD, ExceptionKeywordBean.Type2.ADD);	
				}
			}
			 

      out.write(_jspx_char_array_7);

		}else if(type2.equals("del")){
			
			String[] arTarget = pr.getStringArr("k_seq_R");
			if(arTarget != null && arTarget.length > 0){
				for(int i =0; i < arTarget.length; i++){
					ekMgr.UpdateExkeyword(ekSeq, arTarget[i], ExceptionKeywordBean.Mode.KEYWORD, ExceptionKeywordBean.Type2.DEL);	
				}
			}

      out.write(_jspx_char_array_8);

		}
	}else if(mode.equals("site")){
		if(type2.equals("add")){
			
			String[] arTarget = pr.getStringArr("s_seq_L");
			if(arTarget != null && arTarget.length > 0){
				for(int i =0; i < arTarget.length; i++){
					ekMgr.UpdateExkeyword(ekSeq, arTarget[i], ExceptionKeywordBean.Mode.SITE, ExceptionKeywordBean.Type2.ADD);	
				}
			}

      out.write(_jspx_char_array_9);

		}else if(type2.equals("del")){
			
			
			String[] arTarget = pr.getStringArr("s_seq_R");
			if(arTarget != null && arTarget.length > 0){
				for(int i =0; i < arTarget.length; i++){
					ekMgr.UpdateExkeyword(ekSeq, arTarget[i], ExceptionKeywordBean.Mode.SITE, ExceptionKeywordBean.Type2.DEL);	
				}
			}

      out.write(_jspx_char_array_10);

		}
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
  static char[] _jspx_char_array_0 = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n".toCharArray();
  static char[] _jspx_char_array_1 = "<script type=\"text/javascript\">\r\n			 	alert('저장하였습니다.');\r\n			 	opener.loadList();\r\n			 	window.close();\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_2 = "<script type=\"text/javascript\">\r\n			 	alert('중복된 단어 입니다.');\r\n			 	window.close();\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_3 = "<script type=\"text/javascript\">\r\n			 	alert('저장하였습니다.');\r\n			 	opener.loadList();\r\n			 	window.close();	\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_4 = "<script type=\"text/javascript\">\r\n			 	alert('기존 정보와 같거나 중복된 단어 입니다.');\r\n			 	window.close();\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_5 = "<script type=\"text/javascript\">\r\n			 	alert('삭제하였습니다.');\r\n			 	parent.loadList();\r\n			 	window.close();	\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_6 = "<script type=\"text/javascript\">\r\n			 	alert('1000개이상 삭제 할 수 없습니다.');\r\n			 	window.close();			 	\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_7 = "<script type=\"text/javascript\">	\r\n				parent.showDataList('keyword', \"left\");\r\n			 	parent.showDataList('keyword', \"right\");\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_8 = "<script type=\"text/javascript\">\r\n			 	parent.showDataList('keyword', \"left\");\r\n			 	parent.showDataList('keyword', \"right\");			 	\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_9 = "<script type=\"text/javascript\">\r\n			 	parent.showDataList('site', \"left\");\r\n			 	parent.showDataList('site', \"right\");	\r\n			 </script>\r\n".toCharArray();
  static char[] _jspx_char_array_10 = "<script type=\"text/javascript\">\r\n			 	parent.showDataList('site', \"left\");\r\n			 	parent.showDataList('site', \"right\");			 	\r\n			 </script>\r\n".toCharArray();
}
