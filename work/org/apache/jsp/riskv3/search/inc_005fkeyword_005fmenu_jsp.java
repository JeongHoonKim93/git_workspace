/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-07-27 07:39:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.riskv3.search;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import risk.search.MetaMgr_warning;
import risk.search.GetKGMenu;
import risk.util.DateUtil;
import risk.util.ParseRequest;
import risk.util.StringUtil;
import risk.search.MetaMgr;
import risk.search.MetaMgr_warning;
import risk.search.WarningMgr;
import risk.search.DomainKeywordMgr;
import risk.search.userEnvInfo;
import risk.search.userEnvMgr;
import risk.util.ConfigUtil;
import risk.util.ConfigUtil;

public final class inc_005fkeyword_005fmenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/riskv3/search/../inc/sessioncheck.jsp", Long.valueOf(1658907412822L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.search.DomainKeywordMgr");
    _jspx_imports_classes.add("risk.search.userEnvInfo");
    _jspx_imports_classes.add("risk.util.ConfigUtil");
    _jspx_imports_classes.add("risk.util.ParseRequest");
    _jspx_imports_classes.add("risk.search.GetKGMenu");
    _jspx_imports_classes.add("risk.search.userEnvMgr");
    _jspx_imports_classes.add("risk.util.DateUtil");
    _jspx_imports_classes.add("risk.search.MetaMgr");
    _jspx_imports_classes.add("risk.search.MetaMgr_warning");
    _jspx_imports_classes.add("risk.search.WarningMgr");
    _jspx_imports_classes.add("risk.util.StringUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
//@ page contentType="text/html; charset=euc-kr"
      out.write("\r\n");
      out.write("\r\n");

    
	String SS_M_NO = (String)session.getAttribute("SS_M_NO")   == null ? "": (String)session.getAttribute("SS_M_NO")  ;
    String SS_M_ID = (String)session.getAttribute("SS_M_ID")   == null ? "": (String)session.getAttribute("SS_M_ID")  ;
    String SS_M_NAME = (String)session.getAttribute("SS_M_NAME") == null ? "": (String)session.getAttribute("SS_M_NAME");
    String SS_MG_NO = (String)session.getAttribute("SS_MG_NO")  == null ? "": (String)session.getAttribute("SS_MG_NO") ;
	String SS_TITLE = (String)session.getAttribute("SS_TITLE")  == null ? "": (String)session.getAttribute("SS_TITLE");
    String SS_URL =   (String)session.getAttribute("SS_URL")    == null ? "": (String)session.getAttribute("SS_URL") ;
    String SS_M_DEPT =   (String)session.getAttribute("SS_M_DEPT")    == null ? "": (String)session.getAttribute("SS_M_DEPT") ;    
    String SS_M_IP =   (String)session.getAttribute("SS_M_IP")    == null ? "": (String)session.getAttribute("SS_M_IP") ;    
    String SS_M_MAIL =   (String)session.getAttribute("SS_M_MAIL")    == null ? "": (String)session.getAttribute("SS_M_MAIL") ;    
	String SS_M_ORGVIEW_USEYN = (String)session.getAttribute("SS_M_ORGVIEW_USEYN")    == null ? "": (String)session.getAttribute("SS_M_ORGVIEW_USEYN") ;    
	String SS_ML_URL = javax.servlet.http.HttpUtils.getRequestURL(request).toString();
	
	String SS_SEARCHDATE = (String)session.getAttribute("SS_SEARCHDATE")    == null ? "": (String)session.getAttribute("SS_SEARCHDATE") ;
	
	
    

	if ((SS_M_ID.equals("")) || !SS_M_IP.equals(request.getRemoteAddr()) ) {
		ConfigUtil cu = new ConfigUtil();
		out.print("<SCRIPT Language=JavaScript>");
		//out.print("window.setTimeout( \" top.document.location = "+cu.getConfig("URL")+"'riskv3/error/sessionerror.jsp' \") ");
		out.print("top.document.location = '"+cu.getConfig("URL")+"risk/sessionerror.jsp'");
        out.print("</SCRIPT>");
    }
	

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	//사용자 기본 환경을 조회한다.
    //없으면  NCS기본 유저의 환경을 조회하여 가져온다.
    userEnvInfo uei = null;
    uei     = (userEnvInfo) session.getAttribute("ENV");
    ConfigUtil cu = new ConfigUtil(); 
    String showCount=cu.getConfig("ShowKeywrodCount");
    
    if ( uei.getK_xp().equals("0")) uei.setK_xp("");   	        
    if ( uei.getK_yp().equals("0")) uei.setK_yp("");
    if ( uei.getK_yp().equals("0")) uei.setK_zp("");

    DateUtil        du = new DateUtil();
    StringUtil      su = new StringUtil();
    ParseRequest    pr = new ParseRequest(request);
   // pr.printParams();
    MetaMgr       sMgr = new MetaMgr();
    WarningMgr       WMgr2= new WarningMgr();
    DomainKeywordMgr       dkMgr= new DomainKeywordMgr();
    userEnvInfo env = (userEnvInfo)session.getAttribute("ENV");
    String sideMenu = pr.getString("menu", "ALLKEY");
    String stName = "";
    
    int xp = Integer.parseInt(su.nvl(uei.getK_xp(),"0"));  
	int yp = Integer.parseInt(su.nvl(uei.getK_yp(),"0"));  
	int zp = Integer.parseInt(su.nvl(uei.getK_zp(),"0")); 
    
    GetKGMenu kg = new GetKGMenu();
    kg.setSelected(xp,yp,zp);
    kg.setBaseTarget("top.bottomFrame.contentsFrame.document");
    
    
    if(sideMenu.equals("ALLKEY")){
    	stName = "";
    	kg.setBaseURL("search_main_contents.jsp?searchmode=ALLKEY");
    }else if(sideMenu.equals("EX_ALLKEY")){
    	stName = "EXCEPTION_";
    	kg.setBaseURL("search_main_exception.jsp?searchmode=EX_ALLKEY");
    }else if(sideMenu.equals("PORTALKEY")){
    	stName = "";
    	kg.setBaseURL("search_main_portalKeyword.jsp");
    }else if(sideMenu.equals("NEWS")){
    	stName = "PORTAL_SEARCH_";
    	kg.setBaseURL("search_news_contents.jsp?searchmode=ALLKEY");
    }else if(sideMenu.equals("WARNING")){
    	stName = "WARNING";
    	kg.setBaseURL("warning_main_contents.jsp?searchmode=ALLKEY");
    }else if(sideMenu.equals("DOMAIN")){
    	stName = "DOMAIN";
    	kg.setBaseURL("domain_main_contents.jsp?searchmode=ALLKEY");
    }
    //String IDXcnt = sMgr.getIdxDelCNT(SS_M_NO,stName);
    
	String sCurrentDate = du.getCurrentDate("yyyy-MM-dd");
	
    //if ( uei.getDateFrom()==null) uei.setDateFrom(sCurrentDate);
    //if ( uei.getDateTo()==null) uei.setDateTo(sCurrentDate);
    
		
	
	String kgHtml="";
	System.out.println(">>>>>>>"+stName);
	
	if(stName.equals("PORTAL_SEARCH_")){
		kgHtml   = kg.GetHtml2( sCurrentDate, sCurrentDate, sMgr.getPortalSearchKXP(), showCount, stName);
	}else if(stName.equals("WARNING")){
		kgHtml   = kg.GetHtml4( sCurrentDate, sCurrentDate, WMgr2.getWarningKXP(), showCount, stName);
	}else if(stName.equals("DOMAIN")){
		kgHtml   = kg.GetHtml3( sCurrentDate, sCurrentDate, uei.getMg_xp(), showCount, stName);
	}else {
		kgHtml   = kg.GetHtml( sCurrentDate, sCurrentDate, uei.getMg_xp(), showCount, stName);
	}
    
	String kgScript = kg.GetScript();
	String kgStyle  = kg.GetStyle();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<script>\r\n");
      out.write("<!--\r\n");
      out.write("\tfunction delete_all(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(confirm('휴지통의 정보를 모두 삭제하시겠습니까? \\n 삭제된 정보는 복구할 수 없습니다.')){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\ttop.bottomFrame.contentsFrame.idxProcess('delAll');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("</script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/basic.css\" type=\"text/css\">\r\n");
      out.write("<style>\r\n");
      out.write("<!--\r\n");
      out.write("-->\r\n");
      out.write("</style>\r\n");

	out.println(kgStyle);
	out.println(kgScript);

      out.write("\r\n");
      out.write("<body bgcolor=\"#F1F1F1\" leftmargin=\"5\" topmargin=\"4\" >\r\n");
      out.write("<form name=\"leftmenu\">\r\n");
      out.write("<table style=\"width:100%;table-layout: fixed;\">\r\n");
      out.write("\r\n");

    out.println(kgHtml);

      out.write("\r\n");
      out.write("</table>\r\n");

	boolean menuCheck = false;
	String  infoMsg = "";	
	String[] mg_menu = env.getMg_menu().split(",");
	
	for(int i=0; i<mg_menu.length; i++){
		if(mg_menu[i].equals("2") || mg_menu[i].equals("3") || mg_menu[i].equals("10")){
			menuCheck = true;
			//워닝키워드일 경우는 안내문 안보이게
		/* 	if(mg_menu[i].equals("10")){
				infoMsg =  "none";
				
			} */
			
		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <br>\r\n");
      out.write("<table style=\"display: ");
      out.print(infoMsg);
      out.write("\">\r\n");
      out.write("   <tr>\r\n");
      out.write("     <td style=\"font-size:11px; color:#666666; padding-left:0px; padding-bottom:10px;\">* 키워드별 카운트는 오늘 날짜의 유사기사를 포함한 수치입니다.</td>\r\n");
      out.write("   </tr>      \r\n");
      out.write("</table>   \r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
