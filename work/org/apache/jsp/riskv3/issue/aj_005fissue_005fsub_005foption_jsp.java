/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-07-28 01:46:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.riskv3.issue;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import risk.util.ParseRequest;
import risk.util.DateUtil;
import risk.util.StringUtil;
import risk.issue.IssueCodeMgr;
import risk.issue.IssueCodeBean;
import risk.issue.IssueBean;
import risk.issue.IssueMgr;
import java.util.List;
import java.util.Iterator;
import risk.issue.IssueDataBean;

public final class aj_005fissue_005fsub_005foption_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.issue.IssueCodeMgr");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("risk.issue.IssueDataBean");
    _jspx_imports_classes.add("risk.issue.IssueMgr");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("risk.issue.IssueBean");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("risk.util.StringUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("risk.util.ParseRequest");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("risk.util.DateUtil");
    _jspx_imports_classes.add("risk.issue.IssueCodeBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	ParseRequest pr = new ParseRequest(request);	
	IssueMgr issueMgr = new IssueMgr();
	DateUtil	 du = new DateUtil();
	StringUtil		su = new StringUtil();
	pr.printParams();
	
	String ptype = pr.getString("targetType");
	String pcode = pr.getString("targetCode");
	int depth = (pr.getInt("parentDepth")+1);
	String StandType = pr.getString("parentType");
	IssueCodeMgr 	icm = new IssueCodeMgr();
	IssueCodeBean icBean = new IssueCodeBean();
	ArrayList arrIcBean = new ArrayList();	 //분류코드 어레이
	icm.init(0);
	arrIcBean = icm.getSearchIssueCode(ptype, pcode);
	
	
	//String title = icm.getIssueCodeName(Integer.parseInt(ptype), Integer.parseInt(pcode));
	String checked = "";

      out.write('\r');
      out.write('\n');
if(arrIcBean.size()>0){
      out.write(" \r\n");
      out.write("\t\t\t<input type=\"hidden\" id=\"focus_");
      out.print(StandType);
      out.write('_');
      out.print(depth);
      out.write("\" value=\"\">\r\n");
      out.write("\t\t\t");

					
					for (int i = 0; i < arrIcBean.size(); i++) {
						icBean = (IssueCodeBean) arrIcBean.get(i);			
				
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<input type='radio' id=\"input_info");
      out.print(icBean.getIc_type());
      out.write('_');
      out.print(icBean.getIc_code());
      out.write("\" name=\"input_infoAttr_");
      out.print(icBean.getIc_type());
      out.write("\" data-group=\"");
      out.print(StandType);
      out.write("\" data-depth=\"");
      out.print(depth);
      out.write("\" value=\"");
      out.print(icBean.getIc_type());
      out.write(',');
      out.print(icBean.getIc_code());
      out.write("\"; onclick=\"getSubDepth(");
      out.print(icBean.getIc_type());
      out.write(',');
      out.print(icBean.getIc_code());
      out.write(',');
      out.print(depth);
      out.write(',');
      out.print(StandType);
      out.write(");\" ");
      out.print(checked );
      out.write("/>\r\n");
      out.write("\t\t\t\t\t<label for=\"input_info");
      out.print(icBean.getIc_type());
      out.write('_');
      out.print(icBean.getIc_code());
      out.write("\" style=\"cursor:pointer;\">");
      out.print(icBean.getIc_name());
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t");

						if((i+1)%5==0 && i!=0) {
							out.print("<br>");
						}						
					}
				 
	 } 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
