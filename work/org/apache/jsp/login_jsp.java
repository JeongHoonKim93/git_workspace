/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-07-27 07:39:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import risk.search.userEnvMgr;
import risk.search.userEnvInfo;
import risk.admin.member.MemberDao;
import risk.admin.member.MemberBean;
import risk.util.*;
import risk.DBconn.DBconn;
import risk.admin.log.LogMgr;
import risk.admin.log.LogBean;
import risk.admin.log.LogConstants;
import risk.admin.membergroup.membergroupBean;
import risk.admin.membergroup.membergroupMng;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("risk.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.search.userEnvInfo");
    _jspx_imports_classes.add("risk.DBconn.DBconn");
    _jspx_imports_classes.add("risk.admin.member.MemberDao");
    _jspx_imports_classes.add("risk.admin.log.LogBean");
    _jspx_imports_classes.add("risk.admin.member.MemberBean");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("risk.search.userEnvMgr");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("risk.admin.membergroup.membergroupMng");
    _jspx_imports_classes.add("risk.admin.log.LogMgr");
    _jspx_imports_classes.add("risk.admin.log.LogConstants");
    _jspx_imports_classes.add("risk.admin.membergroup.membergroupBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	ParseRequest pr = new ParseRequest(request);
	//pr.printParams();
	LoginManager lm = LoginManager.getInstance();
	LogMgr logMgr = new LogMgr();
	LogBean logBean = new LogBean();
	StringUtil su = new StringUtil();
	SecurityUtil security = new SecurityUtil();
	
	
	String FimUserID = pr.getString("FimUserID") ;
	//String FimUserPasswd = pr.getString("FimUserPasswd");
	String security_pw = pr.getString("FimUserPasswd");
	
	/* test - security password */
	//비밀번호 입력값 암호화
	//String security_pw = security.encryptSHA256(FimUserPasswd);
	
	/* test */
	
	String saveid = pr.getString("SaveId") ;
	

	String SS_M_NO = "";
	String SS_MG_NO = "";

	DBconn dbconn = null;
	ResultSet rs1 = null;
	ResultSet rs2 = null;
	Statement stmt1 = null;
	Statement stmt2 = null;
	String str_sql1 = "";
	String str_sql2 = "";

	boolean isLogin = false;
	boolean standby = false;
	
	DateUtil du = new DateUtil();
	ConfigUtil cu = new ConfigUtil();
	MemberDao mdao = new MemberDao();
	MemberBean member = null;

	//System.out.println("saveid:"+saveid);
	if (!saveid.equals("")) {		
		//==========  쿠키 저장 =============
		Cookie cookie = new Cookie("lifeRSNid", FimUserID);
		cookie.setMaxAge(30 * 24 * 60 * 60); //30일간 저장
		response.addCookie(cookie);	
	
	}else {
		//==========  쿠키 삭제 =============
		Cookie cookie = new Cookie("lifeRSNid", "");
		cookie.setMaxAge(0); //쿠키삭제
		response.addCookie(cookie);
	}
	
	//사용자 조회 및  패스워드 확인
	member = (MemberBean) mdao.schID(FimUserID, security_pw);

	
	if(member == null){
		out.print("<SCRIPT Language='JavaScript'>		\n");
		out.print("alert('등록된 아이디가 아닙니다.');		\n");
		out.print("document.location = './index.jsp';	\n");
		out.print("</SCRIPT>	\n");		
	}else{	
		
		if (member.getM_id().length()>0 && member.getM_id().equals(FimUserID) ) {
/* 			if (!member.getM_pass().equals(FimUserPasswd)) {
				out.print("<SCRIPT Language='JavaScript'>		\n");
				out.print("alert('패스워드가 틀렸습니다.');			\n");
				out.print("document.location = './index.jsp';	\n");
				out.print("</SCRIPT>							\n");	
			} else {					
				isLogin = true; // 로그인 성공
			}
 */		
			//비밀번호 변경 여부 확인
			String m_seq = member.getM_seq();
			String mg_seq = member.getMg_seq();

			if (!member.getM_pass().equals(security_pw)) {
				out.print("<SCRIPT Language='JavaScript'>		\n");
				out.print("alert('패스워드가 틀렸습니다.');			\n");
				out.print("document.location = './index.jsp';	\n");
				out.print("</SCRIPT>							\n");	
			} else {					
				isLogin = true; // 로그인 성공
			}	 
		} 

		// 로그인 처리 프로세스 시
		if (isLogin) {		
			
		    // 중복로그인 방지 프로세스 시작
			if (lm.isUsing(member.getM_id())) {			
				lm.removeSession(member.getM_id());
				out.print("<SCRIPT Language='JavaScript'>");
				//out.print("alert('동일 아이디 사용자가 존재합니다.\\n\\n기존 사용자는 로그아웃됩니다.\\n다시 로그인해주세요.');");
				out.print("alert('동일 아이디 사용자가 존재합니다.\\n\\n기존 사용자는 로그아웃됩니다.');");
				//out.print("document.location = './login.jsp?FimUserID="+FimUserID+"&FimUserPasswd="+FimUserPasswd+"&SaveId="+saveid+"';\n");			
				out.print("document.location = './login.jsp?FimUserID="+FimUserID+"&FimUserPasswd="+security_pw+"&SaveId="+saveid+"';\n");			
				//out.print("document.location = './index.jsp';	\n");				
				out.print("</SCRIPT>");		
			}else{
				session = request.getSession();			
				session.setAttribute("SS_M_NO", member.getM_seq());
				session.setAttribute("SS_M_ID", member.getM_id());
				session.setAttribute("SS_M_NAME", member.getM_name());
				session.setAttribute("SS_MG_NO", member.getMg_seq());
				session.setAttribute("SS_M_DEPT", member.getM_dept());
				session.setAttribute("SS_M_IP", request.getRemoteAddr());
				session.setAttribute("SS_M_MAIL", member.getM_mail());
				session.setAttribute("SS_M_ORGVIEW_USEYN", member.getM_orgview_useyn());
				session.setAttribute("SS_TITLE", cu.getConfig("TITLE"));
				session.setAttribute("SS_URL", cu.getConfig("URL"));
				session.setAttribute("SS_SEARCHDATE", "");
				session.setMaxInactiveInterval(24*60*60);
				//session.setMaxInactiveInterval(60*10); //고객사요청 10분
				lm.setSession(session, member.getM_id());
				lm.printloginUsers();
				
				//사용자 기본 환경을 조회하여 세션에 저장한다.
				SS_M_NO = member.getM_seq();
				SS_MG_NO = member.getMg_seq();
				userEnvMgr uem = new userEnvMgr();
				userEnvInfo uei = uem.getUserEnv(SS_M_NO, SS_MG_NO);				
				
				//사용자 기본 환경 조회 실패시 처리
				if (uei == null) {
					out.print("<SCRIPT Language='JavaScript'>");
					//out.print("document.location = './riskv3/error/sessionerror.html';");
					out.print("document.location = './riskv3/error/sessionerror.jsp'");
					out.print("</SCRIPT>");
				} else {
					logBean = new LogBean();
					logBean.setKey("0");
					logBean.setL_kinds(LogConstants.loginKindsVal);
					logBean.setL_type(LogConstants.insertTypeVal);
					logBean.setL_ip(request.getRemoteAddr());
					logBean.setM_seq(SS_M_NO);
					
					//로그 저장
					logMgr.insertLog(logBean);
					
					session.setAttribute("ENV", uei);
					

					String [] menufd = null;
					menufd = uei.getMg_menu().split(",");
					
					if( menufd != null ){ 
						/* if( su.inarray(menufd, "6") ){ //대시보드
							out.print("<SCRIPT Language='JavaScript'>");
							out.print("document.location = 'dashboard/index.jsp';");
							out.print("</SCRIPT>");
						} else {
							out.print("<SCRIPT Language='JavaScript'>");
							out.print("document.location = 'riskv3/main.jsp';");
							out.print("</SCRIPT>");
						} */
						out.print("<SCRIPT Language='JavaScript'>");
						//out.print("document.location = 'dashboard/view/press/index.jsp';");
						
						//out.print("document.location = 'dashboard/view/summary/index.jsp';");	//대시보드
						out.print("document.location = 'riskv3/main.jsp';");	//시스템
						//out.print("document.location = 'dashboard/view/main/index.jsp';");
						out.print("</SCRIPT>");
					}
				}
			}
		}else if(standby) {
			out.print("<SCRIPT Language='JavaScript'>		\n");
			out.print("document.location = './index.jsp';	\n");
			out.print("</SCRIPT>							\n");		
		}else{
			out.print("<SCRIPT Language='JavaScript'>		\n");
			out.print("alert('등록된 아이디가 아닙니다.');		\n");
			out.print("document.location = './index.jsp';	\n");
			out.print("</SCRIPT>	\n");		
		}
	}


      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
