/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2022-05-24 07:53:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.riskv3.admin.keyword;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import risk.util.*;
import java.lang.*;
import risk.admin.keyword.KeywordMng;
import risk.admin.keyword.KeywordBean;
import risk.util.ConfigUtil;

public final class admin_005fkeyword_005fprc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/riskv3/admin/keyword/../../inc/sessioncheck.jsp", Long.valueOf(1651044823347L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("risk.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("risk.admin.keyword.KeywordBean");
    _jspx_imports_classes.add("risk.util.ConfigUtil");
    _jspx_imports_classes.add("risk.admin.keyword.KeywordMng");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


/*******************************************************
*  1. 분    류    명 : 관리자메뉴 키워드그룹설정
*  2. 업무 시스템 명 : 정보검색검색
*  3. 프로그램  개요 : 키워드설정 사용자화면
*  4. 관 련  Table명 : KEYWORD
*  5. 작    성    자 : 박도형
*  6. 작    성    일 : 2006.4.21
*  7. 주  의  사  항 :
*  8. 변   경   자   :
*  9. 변 경  일 자   :
* 10. 변 경  사 유   :
********************************************************/

//@ page contentType="text/html; charset=euc-kr"

    
	String SS_M_NO = (String)session.getAttribute("SS_M_NO")   == null ? "": (String)session.getAttribute("SS_M_NO")  ;
    String SS_M_ID = (String)session.getAttribute("SS_M_ID")   == null ? "": (String)session.getAttribute("SS_M_ID")  ;
    String SS_M_NAME = (String)session.getAttribute("SS_M_NAME") == null ? "": (String)session.getAttribute("SS_M_NAME");
    String SS_MG_NO = (String)session.getAttribute("SS_MG_NO")  == null ? "": (String)session.getAttribute("SS_MG_NO") ;
	String SS_TITLE = (String)session.getAttribute("SS_TITLE")  == null ? "": (String)session.getAttribute("SS_TITLE");
    String SS_URL =   (String)session.getAttribute("SS_URL")    == null ? "": (String)session.getAttribute("SS_URL") ;
    String SS_M_DEPT =   (String)session.getAttribute("SS_M_DEPT")    == null ? "": (String)session.getAttribute("SS_M_DEPT") ;    
    String SS_M_IP =   (String)session.getAttribute("SS_M_IP")    == null ? "": (String)session.getAttribute("SS_M_IP") ;    
    String SS_M_MAIL =   (String)session.getAttribute("SS_M_MAIL")    == null ? "": (String)session.getAttribute("SS_M_MAIL") ;    
	String SS_M_ORGVIEW_USEYN = (String)session.getAttribute("SS_M_ORGVIEW_USEYN")    == null ? "": (String)session.getAttribute("SS_M_ORGVIEW_USEYN") ;    
	String SS_ML_URL = javax.servlet.http.HttpUtils.getRequestURL(request).toString();
	
	String SS_SEARCHDATE = (String)session.getAttribute("SS_SEARCHDATE")    == null ? "": (String)session.getAttribute("SS_SEARCHDATE") ;
	
	
    

	if ((SS_M_ID.equals("")) || !SS_M_IP.equals(request.getRemoteAddr()) ) {
		ConfigUtil cu = new ConfigUtil();
		out.print("<SCRIPT Language=JavaScript>");
		//out.print("window.setTimeout( \" top.document.location = "+cu.getConfig("URL")+"'riskv3/error/sessionerror.jsp' \") ");
		out.print("top.document.location = '"+cu.getConfig("URL")+"risk/sessionerror.jsp'");
        out.print("</SCRIPT>");
    }
	



/*
    ParseRequest    pr = new ParseRequest(request);

	String tg			= pr.getString("tg");
	String mode			= pr.getString("mode");
    String xp			= pr.getString("xp");
    String yp			= pr.getString("yp");
    String zp			= pr.getString("zp");
    String val			= pr.getString("val");

	String[] type = null;
	String Script = "";
	int i;

	
	
		KeywordMng keymng = KeywordMng.getInstance();

	if( tg.equals("total") ) {
		if( mode.equals("ins") ) {
			keymng.insert(val, SS_M_NAME);
		}
	} else if( tg.equals("upkg") ) {
		if( mode.equals("ins") ) {
			keymng.insert( Integer.parseInt(xp), val, SS_M_NAME );
			Script = "?xp="+xp+"";
		} else if( mode.equals("edit") ) {
			keymng.update( Integer.parseInt(xp), val, SS_M_NAME );
			Script = "?xp="+xp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), SS_M_NAME );
			Script = "";
		} else if( mode.equals("up") ) {
			keymng.moveUP( Integer.parseInt(xp), SS_M_NAME );
			Script = "?xp="+xp+"";
		} else if( mode.equals("down") ) {
			keymng.moveDOWN( Integer.parseInt(xp), SS_M_NAME );
			Script = "?xp="+xp+"";
		} else {
			Script = "?xp="+xp+"";
		} 
		
		
		
		
		
	} else if( tg.equals("downkg") ) {
		if( mode.equals("ins") ) {
			keymng.insert( Integer.parseInt(xp), Integer.parseInt(yp), val, 1, SS_M_NAME);
			Script = "?xp="+xp+"&yp="+yp+"";
		} else if( mode.equals("edit") ) {
			keymng.update( Integer.parseInt(xp), Integer.parseInt(yp), val, SS_M_NAME );
			Script = "?xp="+xp+"&yp="+yp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), Integer.parseInt(yp), SS_M_NAME );
			Script = "?xp="+xp+"";
		} else {
			Script = "?xp="+xp+"";
		}
		
		
		
	} 
	
		else if( tg.equals("kg") ) {
		if( mode.equals("ins") ) {
			keymng.insert( Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), 0, val, SS_M_NAME  );
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		} else if( mode.equals("edit") ) {
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), SS_M_NAME );
			Script = "?xp="+xp+"&yp="+yp+"";
		} else {
			Script = "?xp="+xp+"&yp="+yp+"";
		} 
		
		
		 
	} else if( tg.equals("exkey") ) { 
		   StringBuffer sb = new StringBuffer();

			if( request.getParameter("type") != null ) type = request.getParameterValues("type");

			for(i=0; i< type.length;i++)
			{
				if( i != 0) sb.append(",");
				sb.append(type[i]);
			}
			keymng.delete(Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), sb.toString(), SS_M_NAME);
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
	} else {
		Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
	}
	*/
	
	ParseRequest    pr = new ParseRequest(request);

	String tg			= pr.getString("tg");
	String mode			= pr.getString("mode");
    String xp			= pr.getString("xp");
    String yp			= pr.getString("yp");
    String zp			= pr.getString("zp");
    String val			= pr.getString("val").replaceAll("'","''");
    String nearLen			= pr.getString("nearLen","30");
	int op			= pr.getInt("k_op",1);
	String[] type = null;
	String Script = "";
	int i;
	
	String sg_seqs = pr.getString("sg_seqs");
	
	System.out.println("tg = "+tg+", mode = "+mode+" ");
	System.out.println("xp = "+xp+", yp = "+yp+", zp = "+zp+", val = "+val);
	
	
	KeywordMng keymng = KeywordMng.getInstance();

	if( tg.equals("total") ) {
		if( mode.equals("ins") ) {
			String[] tmpVal = val.split("\n");
			for(int j=0; j<tmpVal.length; j++){
				keymng.insert(tmpVal[j].trim(), SS_M_NO);
			}
		}
	} else if( tg.equals("upkg") ) {
		if( mode.equals("ins") ) {
			String[] tmpVal = val.split("\n");
			for(int j=0; j<tmpVal.length; j++){
				keymng.insert( Integer.parseInt(xp), tmpVal[j].trim(), SS_M_NO );
			}
			Script = "?xp="+xp+"";
		} else if( mode.equals("edit") ) {
			keymng.update( Integer.parseInt(xp), val, SS_M_NO );
			Script = "?xp="+xp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), SS_M_NO );
			Script = "";
		} else if( mode.equals("up") ) {
			keymng.moveUP( Integer.parseInt(xp), SS_M_NO );
			Script = "?xp="+xp+"";
		} else if( mode.equals("down") ) {
			keymng.moveDOWN( Integer.parseInt(xp), SS_M_NO );
			Script = "?xp="+xp+"";
		} else if( mode.equals("sitegroup") ) {
			keymng.setSiteGroup(xp, sg_seqs);
			Script = "?xp="+xp+"";
		} else {
			Script = "?xp="+xp+"";
		}
	} else if( tg.equals("downkg") ) {
		if( mode.equals("ins") ) {
			String[] tmpVal = val.split("\n");
			for(int j=0; j<tmpVal.length; j++){
				keymng.insert( Integer.parseInt(xp), Integer.parseInt(yp), tmpVal[j].trim(), op, SS_M_NO);
			}
			Script = "?xp="+xp+"&yp="+yp+"";
		} else if( mode.equals("edit") ) {
			keymng.update( Integer.parseInt(xp), Integer.parseInt(yp), val, SS_M_NO );
			Script = "?xp="+xp+"&yp="+yp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), Integer.parseInt(yp), SS_M_NO );
			Script = "?xp="+xp+"";
		} else {
			Script = "?xp="+xp+"";
		}
	}else if( tg.equals("kg") ) {
		if( mode.equals("ins") ) {
			String[] tmpVal = val.split("\n");
			for(int j=0; j<tmpVal.length; j++){
				keymng.insert( Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), tmpVal[j].trim(), op, SS_M_NO  );
			}
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		} else if( mode.equals("edit") ) {
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		} else if( mode.equals("del") ) {
			keymng.delete( Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), SS_M_NO );
			Script = "?xp="+xp+"&yp="+yp+"";
		}else if( mode.equals("near") ) {
			keymng.updateNearLen(Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), nearLen);
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		}else if( mode.equals("near_all") ) {
			keymng.updateNearLen(nearLen);
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		} else {
			
			
			
			Script = "?xp="+xp+"&yp="+yp+"";
			
			
			
		}
	} else if( tg.equals("exkey") ) {
		   StringBuffer sb = new StringBuffer();

			if( request.getParameter("type") != null ) type = request.getParameterValues("type");

			for(i=0; i< type.length;i++)
			{
				if( i != 0) sb.append(",");
				sb.append(type[i]);
			}
			keymng.delete(Integer.parseInt(xp), Integer.parseInt(yp), Integer.parseInt(zp), sb.toString(), SS_M_NO);
			Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
	} else {
		
		Script = "?xp="+xp+"&yp="+yp+"&zp="+zp+"";
		
	}
	

      out.write(_jspx_char_array_0);
      out.print(Script);
      out.write(_jspx_char_array_1);
      out.print(Script);
      out.write(_jspx_char_array_2);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
  static char[] _jspx_char_array_0 = "<SCRIPT LANGUAGE=\"JavaScript\">\n<!--\n	parent.keyword_left.location.href = 'admin_keyword_left.jsp".toCharArray();
  static char[] _jspx_char_array_1 = "';\n	document.location.href = \"admin_keyword_right.jsp".toCharArray();
  static char[] _jspx_char_array_2 = "\";\n//-->\n</SCRIPT>".toCharArray();
}
